#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    ver=$1
    file=$2
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        echo http://go.googlecode.com/files/$file
        ;;
    *)
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

# Expand to supported versions of Go, (e.g. expand "go1.5" to latest release go1.5.2)
# All specific or other versions, take as is.
expand_ver() {
  buildpack_dir=$1
  target_version=$2
  highest_ver="$($buildpack_dir/compile-extensions/bin/highest_version $buildpack_dir/manifest.yml go $target_version)"

  if [ "$highest_ver" = "" ]; then
    echo $target_version
  else
    echo $highest_ver
  fi
}

# Report deprecated versions to user
# Use after expand_ver
report_ver() {
  case $1 in
    go1.6beta1|go1.5.2|go1.4.3)
      # Noop
    ;;
    *)
      warn ""
      warn "Deprecated version of go ($1)"
      warn "See https://devcenter.heroku.com/articles/go-support#go-versions for supported version information."
      warn ""
    ;;
  esac
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
buildpack=$(cd "$(dirname $0)/.." && pwd)

arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip

python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH
steptxt="----->"

# CF Common
BUILDPACK_PATH=$buildpack
export BUILDPACK_PATH
source $buildpack/compile-extensions/lib/common
export PYTHONHOME=$BUILDPACK_PATH/builds/runtimes/python-2.7.6
export PATH=$PYTHONHOME/bin:$PATH
$BUILDPACK_PATH/compile-extensions/bin/check_stack_support
$BUILDPACK_PATH/compile-extensions/bin/download_dependency godep /tmp
tar -xzf /tmp/godep -C /tmp
PATH=/tmp/bin:$PATH
# END CF Common

virtualenv() {
    python "$buildpack/vendor/virtualenv-1.11.6/virtualenv.py" "$@"
}

warn() {
    echo -e >&2 "${YELLOW} !     $@${NC}"
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

if test -f $build/Godeps
then
    warn ""
    warn "Deprecated, old ./Godeps file found!"
    warn ""
    warn "Support for this old version of Godeps is ending on 2016/02/01"
    warn ""
    warn "Please upgrade godeps (go get -u github.com/tools/godep) and"
    warn "re-save your dependencies: godep save -r ./..."
    warn ""
    warn "See also: https://devcenter.heroku.com/articles/go-dependencies-via-godep"
    warn ""
    name=$(<$build/Godeps jq -r .ImportPath)
    ver=$(<$build/Godeps jq -r .GoVersion)
elif test -f $build/Godeps/Godeps.json
then
    step "Checking Godeps/Godeps.json file."
    if ! jq -r . < $build/Godeps/Godeps.json > /dev/null
    then
        warn "Bad Godeps/Godeps.json file"
        exit 1
    fi
    name=$(<$build/Godeps/Godeps.json jq -r .ImportPath)
    ver=$(<$build/Godeps/Godeps.json jq -r .GoVersion)
elif test -f $build/.godir
then
    warn "Deprecated, .godir file found! Please update to supported Godeps dependency manager."
    warn "See https://github.com/tools/godep for usage information."
    exit 1
else
    warn "Godeps are required. For instructions:"
    warn "https://devcenter.heroku.com/articles/go-support"
    exit 1
fi

ver=$(expand_ver $buildpack $ver)

file=${GOFILE:-$ver.linux-amd64.tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

if test -e $build/bin && ! test -d $build/bin
then
    warn ""
    warn "File bin exists and is not a directory."
    warn ""
    exit 1
fi

report_ver $ver

if test -d $cache/$ver/go
then
    step "Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    cd $cache/$ver
        exit_code=0
        url=$(translate_dependency_url $ver) || exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo -e "`$buildpack/compile-extensions/bin/recommend_dependency $ver`" 1>&2
          exit 22
        fi

    start "Installing $ver"
        curl -s $url | tar zxf -
    finished
    echo "Downloaded [$url]"
    cd - >/dev/null
fi

mkdir -p $build/bin
GOBIN=$build/bin export GOBIN
GOROOT=$cache/$ver/go export GOROOT
GOPATH=$build/.heroku/go export GOPATH
PATH=$GOROOT/bin:$PATH

p=$GOPATH/src/$name
mkdir -p $p
cp -R $build/* $p

# allow apps to specify cgo flags and set up /app symlink so things like CGO_CFLAGS=-I/app/... work
env_dir=${3:-''}
if [ -d $env_dir ]
then
    ln -sfn $build /app/code
  for key in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS GO_LINKER_SYMBOL GO_LINKER_VALUE GO15VENDOREXPERIMENT
    do
        if [ -f "$env_dir/$key" ]
        then
            export "$key=$(cat "$env_dir/$key")"
        fi
    done
fi

if test -e $build/Godeps/Godeps.json
then
  pkgs=$(<$build/Godeps/Godeps.json jq -r 'if .Packages then .Packages | join(" ") else "." end')
else
  pkgs="./..."
fi

set +u
if test "$GO15VENDOREXPERIMENT" = "1"
then
  case $ver in
  go1.5*)
      warn ""
      warn "\$GO15VENDOREXPERIMENT=1. This is an experiment. Things may not work as expected."
      warn "See https://devcenter.heroku.com/articles/go-support#go-1-5-vendor-experiment for more info."
      warn ""
      if test ! -d "$build/vendor"
      then
        warn ""
        warn "vendor/ directory does not exist."
        warn ""
        exit 1
      fi
      ;;
  *)
      warn "\$GO15VENDOREXPERIMENT=1 set, but unsupported on $ver"
      exit 1
      ;;
  esac
fi

# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
FLAGS=(-tags cloudfoundry)
if [ -n "$GO_LINKER_SYMBOL" -a -n "$GO_LINKER_VALUE" ]
then
  case $ver in
  go1.5*)
    xval="$GO_LINKER_SYMBOL=$GO_LINKER_VALUE"
    ;;
  *)
    xval="$GO_LINKER_SYMBOL $GO_LINKER_VALUE"
    ;;
  esac
  FLAGS=(${FLAGS[@]} -ldflags "-X $xval")
fi

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p
if test -e $build/Godeps
then
    if test "$GO15VENDOREXPERIMENT" = "1"
    then
      step "Running: go install -v ${FLAGS[@]} $pkgs"
      go install -v "${FLAGS[@]}" $pkgs
    else
      step "Running: godep go install ${FLAGS[@]} $pkgs"
      godep go install "${FLAGS[@]}" $pkgs
    fi
else
    step "Running: go get ${FLAGS[@]} $pkgs"
    go get "${FLAGS[@]}" $pkgs
fi
set -u

if [ $? -ne 0 ] ; then
	exit 1
fi

rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
cp $buildpack/vendor/concurrency.sh $build/.profile.d/

# Add pdal binary and libraries to path
step "Adding pdal support"
tar xzf $buildpack/vendor/pdal.tar.gz -C $build/vendor/
step "Adding gdal data"
tar xzf $buildpack/vendor/gdaldata.tar.gz -C /usr/share
